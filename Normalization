import numpy as np
import scipy.constants as const
import scipy.integrate as integrate
import matplotlib.pyplot as plt

# Definir constantes
m_e = const.m_e  # Masa del electrón (kg)
hbar = const.hbar  # h barra (J·s)
eV = const.e  # 1 eV en Joules

# Parámetros del problema
V0_meV = 225  # Potencial en meV
V0 = V0_meV * 1e-3  # Convertir a eV
V0_J = V0 * eV  # Convertir a Joules
L_nm = 100  # Longitud del pozo en nm
L = L_nm * 1e-9  # Convertir a metros

# Definir la función de onda
def psi(x, E, V0, L, A):
    E_J = E * eV
    k = np.sqrt(2 * m_e * E_J) / hbar
    q = np.sqrt(2 * m_e * (V0_J - E_J)) / hbar
    
    if x < 0:
        return A * np.exp(q * x)
    elif 0 <= x <= L:
        return (0.5 + q / (2j * k)) * A * np.exp(1j * k * x) + (0.5 - q / (2j * k)) * A * np.exp(-1j * k * x)
    else:
        return (q / k * np.sin(k * L) + np.cos(k * L)) * A * np.exp(q * (L - x))

# Función para calcular la integral de normalización
def integral_normalizacion(E, V0, L):
    E_J = E * eV
    k = np.sqrt(2 * m_e * E_J) / hbar
    q = np.sqrt(2 * m_e * (V0_J - E_J)) / hbar
    
    # Definir el integrando |ψ(x)|^2
    def integrand(x):
        return np.abs(psi(x, E, V0, L, 1))**2  # Usamos A = 1 temporalmente
    
    # Calcular la integral en tres regiones
    integral1, _ = integrate.quad(integrand, -np.inf, 0)  # Región x < 0
    integral2, _ = integrate.quad(integrand, 0, L)       # Región 0 <= x <= L
    integral3, _ = integrate.quad(integrand, L, np.inf)  # Región x > L
    
    return integral1 + integral2 + integral3

# Calcular la constante de normalización A
def calcular_A(E, V0, L):
    integral = integral_normalizacion(E, V0, L)
    A = 1 / np.sqrt(integral)  # Despejar A de la condición de normalización
    return A

# Ejemplo de uso
E = 0.01  # Energía en eV (debe ser menor que V0)
A = calcular_A(E, V0, L)
print(f"La constante de normalización A es: {A}")

# Graficar la función de onda normalizada
x_values = np.linspace(-2 * L_nm, 2 * L_nm, 1000)  # Rango de x en nm
psi_values = [psi(x * 1e-9, E, V0, L, A) for x in x_values]  # Convertir x a metros

plt.plot(x_values, np.abs(psi_values)**2, label=f'|ψ(x)|^2 para E = {E} eV')
plt.xlabel("Posición x (nm)")
plt.ylabel("|ψ(x)|^2")
plt.title(f"Función de onda normalizada para L = {L_nm} nm")
plt.legend()
plt.grid()
plt.show()
