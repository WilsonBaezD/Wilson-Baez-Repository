import numpy as np
import scipy.constants as const
import scipy.optimize as opt
import matplotlib.pyplot as plt

# Definir constantes
m_e = const.m_e  # Masa del electrón (kg)
hbar = const.hbar  # h barra (J·s)
eV = const.e  # 1 eV en Joules

# Parámetros del problema
V0_meV = 225  # Potencial en meV
V0 = V0_meV * 1e-3  # Convertir a eV
V0_J = V0 * eV  # Convertir a Joules
L_nm_values = [10, 50, 100]  # Valores de L en nm
L_values = [L * 1e-9 for L in L_nm_values]  # Convertir a metros

# Definir la ecuación trascendental
def f(E, V0, L):
    E_J = E * eV  # Convertir a Joules
    if E >= V0:  # Solo valores físicos
        return np.inf
    k = np.sqrt(2 * m_e * E_J) / hbar
    kappa = np.sqrt(E * (V0 - E))  # Corregido según la definición dada
    return (V0 - E) * np.sin(k * L) + 2 * kappa * np.cos(k * L)

# Encontrar raíces de la ecuación en el rango [0, V0]
def encontrar_niveles(V0, L):
    niveles = []
    E_range = np.linspace(0, V0, 1000)  # Barrido de energías
    signos = np.sign([f(E, V0, L) for E in E_range])
    
    for i in range(len(E_range) - 1):
        if signos[i] != signos[i + 1]:  # Cambio de signo indica raíz
            raiz = opt.brentq(f, E_range[i], E_range[i + 1], args=(V0, L))
            niveles.append(raiz)
    
    return niveles

# Crear gráficos separados
fig, axs = plt.subplots(1, 3, figsize=(15, 5))

for ax, L_nm, L in zip(axs, L_nm_values, L_values):
    niveles = encontrar_niveles(V0, L)
    
    # Dibujar el pozo de potencial
    x_pozo = [-L_nm/2, -L_nm/2, L_nm/2, L_nm/2]
    y_pozo = [V0, 0, 0, V0]
    ax.plot(x_pozo[:2], y_pozo[:2], 'k')  # Borde izquierdo
    ax.plot(x_pozo[2:], y_pozo[2:], 'k')  # Borde derecho
    ax.hlines(0, -L_nm/2, L_nm/2, colors='k')  # Base del pozo
    
    # Dibujar niveles de energía dentro del pozo
    for nivel in niveles:
        ax.hlines(nivel, xmin=-L_nm/2, xmax=L_nm/2, color='r', linewidth=2)
    
    ax.set_xlabel("Posición x (nm)")
    ax.set_ylabel("Energía (eV)")
    ax.set_title(f"Pozo de potencial para L = {L_nm} nm")
    ax.grid()

plt.tight_layout()
plt.show()
